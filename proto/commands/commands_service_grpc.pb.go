// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package env

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CommandsClient is the client API for Commands service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandsClient interface {
	RegisterCommand(ctx context.Context, in *RegisterCommandRequest, opts ...grpc.CallOption) (Commands_RegisterCommandClient, error)
}

type commandsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandsClient(cc grpc.ClientConnInterface) CommandsClient {
	return &commandsClient{cc}
}

func (c *commandsClient) RegisterCommand(ctx context.Context, in *RegisterCommandRequest, opts ...grpc.CallOption) (Commands_RegisterCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Commands_serviceDesc.Streams[0], "/commands.Commands/RegisterCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandsRegisterCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Commands_RegisterCommandClient interface {
	Recv() (*CommandEvent, error)
	grpc.ClientStream
}

type commandsRegisterCommandClient struct {
	grpc.ClientStream
}

func (x *commandsRegisterCommandClient) Recv() (*CommandEvent, error) {
	m := new(CommandEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandsServer is the server API for Commands service.
// All implementations must embed UnimplementedCommandsServer
// for forward compatibility
type CommandsServer interface {
	RegisterCommand(*RegisterCommandRequest, Commands_RegisterCommandServer) error
	mustEmbedUnimplementedCommandsServer()
}

// UnimplementedCommandsServer must be embedded to have forward compatible implementations.
type UnimplementedCommandsServer struct {
}

func (UnimplementedCommandsServer) RegisterCommand(*RegisterCommandRequest, Commands_RegisterCommandServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterCommand not implemented")
}
func (UnimplementedCommandsServer) mustEmbedUnimplementedCommandsServer() {}

// UnsafeCommandsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandsServer will
// result in compilation errors.
type UnsafeCommandsServer interface {
	mustEmbedUnimplementedCommandsServer()
}

func RegisterCommandsServer(s grpc.ServiceRegistrar, srv CommandsServer) {
	s.RegisterService(&_Commands_serviceDesc, srv)
}

func _Commands_RegisterCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandsServer).RegisterCommand(m, &commandsRegisterCommandServer{stream})
}

type Commands_RegisterCommandServer interface {
	Send(*CommandEvent) error
	grpc.ServerStream
}

type commandsRegisterCommandServer struct {
	grpc.ServerStream
}

func (x *commandsRegisterCommandServer) Send(m *CommandEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _Commands_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commands.Commands",
	HandlerType: (*CommandsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterCommand",
			Handler:       _Commands_RegisterCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "commands/commands_service.proto",
}
