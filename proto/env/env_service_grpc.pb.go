// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package env

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EnvClient is the client API for Env service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvClient interface {
	GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*GetEnvResponse, error)
}

type envClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvClient(cc grpc.ClientConnInterface) EnvClient {
	return &envClient{cc}
}

func (c *envClient) GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*GetEnvResponse, error) {
	out := new(GetEnvResponse)
	err := c.cc.Invoke(ctx, "/env.Env/GetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvServer is the server API for Env service.
// All implementations must embed UnimplementedEnvServer
// for forward compatibility
type EnvServer interface {
	GetEnv(context.Context, *GetEnvRequest) (*GetEnvResponse, error)
	mustEmbedUnimplementedEnvServer()
}

// UnimplementedEnvServer must be embedded to have forward compatible implementations.
type UnimplementedEnvServer struct {
}

func (UnimplementedEnvServer) GetEnv(context.Context, *GetEnvRequest) (*GetEnvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnv not implemented")
}
func (UnimplementedEnvServer) mustEmbedUnimplementedEnvServer() {}

// UnsafeEnvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvServer will
// result in compilation errors.
type UnsafeEnvServer interface {
	mustEmbedUnimplementedEnvServer()
}

func RegisterEnvServer(s grpc.ServiceRegistrar, srv EnvServer) {
	s.RegisterService(&_Env_serviceDesc, srv)
}

func _Env_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/env.Env/GetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvServer).GetEnv(ctx, req.(*GetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Env_serviceDesc = grpc.ServiceDesc{
	ServiceName: "env.Env",
	HandlerType: (*EnvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnv",
			Handler:    _Env_GetEnv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "env/env_service.proto",
}
